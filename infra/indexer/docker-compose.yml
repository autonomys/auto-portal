volumes:
  node-data: {}
  postgres_staking_db: {}
  redis_db: {}
  caddy_config: {}
  caddy_data: {}

services:
  # Caddy Reverse Proxy with CORS enabled
  caddy:
    ulimits:
      nofile:
        soft: 65536 # Soft limit for open files (WebSocket connections count)
        hard: 65536 # Hard limit for open files
    image: caddy:latest
    ports:
      - '127.0.0.1:8000:8000'
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile # Mount the Caddyfile
      - caddy_data:/data # Volume for Let's Encrypt certificates
      - caddy_config:/config
    depends_on:
      - node
    restart: unless-stopped

  # Subspace Node
  node:
    image: ghcr.io/autonomys/node:${NODE_DOCKER_TAG}
    volumes:
      - node-data:/var/subspace:rw
    ports:
      - '30333:30333/tcp'
      - '30433:30433/tcp'
      - '127.0.0.1:9944:9944/tcp'
    restart: unless-stopped
    command:
      [
        'run',
        '--chain',
        '${NETWORK_ID}',
        '--base-path',
        '/var/subspace',
        '--state-pruning',
        'archive',
        '--blocks-pruning',
        'archive',
        '--listen-on',
        '/ip4/0.0.0.0/tcp/30333',
        '--dsn-listen-on',
        '/ip4/0.0.0.0/tcp/30433',
        '--rpc-cors',
        'all',
        '--rpc-methods',
        'unsafe',
        '--unsafe-rpc-external',
        '--rpc-listen-on',
        '0.0.0.0:9944',
      ]
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'curl -H ''Content-Type: application/json'' -d ''{"id":1, "jsonrpc":"2.0", "method": "system_health", "params":[]}'' http://localhost:9944/',
        ]
      interval: 5s
      timeout: 5s
      retries: 5

  # Postgres Database for Staking
  postgres-staking:
    image: postgres:17.3-alpine
    volumes:
      - postgres_staking_db:/var/lib/postgresql/data
      - ./db/docker-entrypoint-initdb.d/staking-only/00-staking-setup.sql:/docker-entrypoint-initdb.d/00-staking-setup.sql
      - ./db/docker-entrypoint-initdb.d/staking-only/07-schema-staking.sql:/docker-entrypoint-initdb.d/01-schema-staking.sql
      - ./db/postgresql.conf:/etc/postgresql/postgresql.conf
    restart: unless-stopped
    hostname: postgres-staking
    shm_size: 4g
    environment:
      POSTGRES_DB: ${STAKING_DB_DATABASE:-staking}
      POSTGRES_USER: ${STAKING_DB_USER:-postgres}
      POSTGRES_PASSWORD: ${STAKING_DB_PASSWORD:-postgres}
      POSTGRES_MAX_CONNECTIONS: 200
      POSTGRES_HOST_AUTH_METHOD: md5
      POSTGRES_INITDB_ARGS: --auth=md5
    ports:
      - '${STAKING_DB_PORT:-5433}:5432'
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${STAKING_DB_USER:-postgres}']
      interval: 5s
      timeout: 5s
      retries: 5
    command: ['postgres', '-c', 'config_file=/etc/postgresql/postgresql.conf']

  # PGCat Proxy for Staking
  pgcat-staking:
    image: ghcr.io/postgresml/pgcat:4a7a6a8e7a78354b889002a4db118a8e2f2d6d79
    command:
      - 'pgcat'
      - '/etc/pgcat/pgcat.toml'
    volumes:
      - './db/pgcat-staking.toml:/etc/pgcat/pgcat.toml'
    ports:
      - '6433:6432'
    healthcheck:
      test: ['CMD', 'pgcat', '--version']
      interval: 10s
      timeout: 5s
      retries: 3
    depends_on:
      postgres-staking:
        condition: service_healthy
    restart: unless-stopped

  # Redis
  redis:
    image: redis:latest
    restart: unless-stopped
    ports:
      - '${REDIS_PORT:-6379}:6379'
    volumes:
      - redis_db:/data
    hostname: redis
    command: ['redis-server', '--bind', '0.0.0.0', '--port', '6379']
    healthcheck:
      test: ['CMD-SHELL', 'redis-cli -h localhost -p 6379 ping | grep PONG || exit 1']
      interval: 5s
      timeout: 5s
      retries: 10

  # Staking Indexer
  staking-indexer:
    build:
      context: ../../packages/staking-indexer
    depends_on:
      pgcat-staking:
        condition: service_healthy
      postgres-staking:
        condition: service_healthy
      node:
        condition: service_healthy
    restart: unless-stopped
    environment:
      NODE_DOCKER_TAG: ${NODE_DOCKER_TAG}
      NETWORK_ID: ${NETWORK_ID}
      CHAIN_ID: ${CHAIN_ID}
      RPC_URLS: ${RPC_URLS}
      START_BLOCK_STAKING: ${START_BLOCK_STAKING}
      STAKING_DATABASE_URL: postgres://${STAKING_DB_USER:-postgres}:${STAKING_DB_PASSWORD:-postgres}@${STAKING_DB_HOST:-postgres-staking}:${STAKING_INTERNAL_PORT:-5432}/${STAKING_DB_DATABASE:-staking}
    volumes:
      - ./staking:/app

  # Staking Worker
  staking-worker:
    build:
      context: ../../packages/staking-worker
      dockerfile: Dockerfile
    depends_on:
      pgcat-staking:
        condition: service_healthy
      postgres-staking:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    environment:
      AUTONOMYS_NODE_URL: ${RPC_URLS}
      DB_HOST: ${STAKING_DB_HOST:-postgres-staking}
      DB_PORT: ${STAKING_INTERNAL_PORT:-5432} # Internal port, not external
      DB_USER: ${STAKING_DB_USER:-postgres}
      DB_PASSWORD: ${STAKING_DB_PASSWORD:-postgres}
      DB_NAME: ${STAKING_DB_DATABASE:-staking}
      REDIS_URL: 'redis://${REDIS_SERVICE_HOST:-redis}:${REDIS_SERVICE_PORT:-6379}'
      BATCH_SIZE: '${BATCH_SIZE:-1000}'
      QUEUE_PROCESSING_INTERVAL_MS: '${QUEUE_PROCESSING_INTERVAL_MS:-500}'
      # Performance configuration
      MAX_CONCURRENT_BATCHES: '${MAX_CONCURRENT_BATCHES:-8}'
      DB_POOL_SIZE: '${DB_POOL_SIZE:-25}'
      DB_CONNECTION_TIMEOUT_MS: '${DB_CONNECTION_TIMEOUT_MS:-3000}'
      # Retry configuration
      MAX_RETRIES: '${MAX_RETRIES:-3}'
      RETRY_DELAY_MS: '${RETRY_DELAY_MS:-5000}'
      # Finality and chain monitoring
      FINALITY_THRESHOLD: '${FINALITY_THRESHOLD:-100}'
      CHAIN_TIP_UPDATE_INTERVAL_MS: '${CHAIN_TIP_UPDATE_INTERVAL_MS:-10000}'
      CHAIN_HEAD_POLL_INTERVAL_MS: '${CHAIN_HEAD_POLL_INTERVAL_MS:-6000}'
      # Health Check Configuration
      DB_HEALTH_CHECK_INTERVAL_MS: '${DB_HEALTH_CHECK_INTERVAL_MS:-30000}'
      # Logging
      ENABLE_DEBUG_LOGS: '${ENABLE_DEBUG_LOGS:-false}'
      LOG_LEVEL: '${LOG_LEVEL:-info}'
    healthcheck:
      test: ['CMD', 'node', '-e', 'process.exit(0)']
      interval: 30s
      timeout: 10s
      start_period: 5s
      retries: 3
