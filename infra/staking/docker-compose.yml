volumes:
  node_data:
    external: true
    name: node_data
  postgres_staking_db: {}
  redis_db: {}
  traefik_letsencrypt: {}

services:
  # Autonomys Node
  node:
    profiles: [local-node] # Make node service optional
    image: ghcr.io/autonomys/node:${NODE_DOCKER_TAG}
    volumes:
      - node_data:/var/subspace:rw
    ports:
      - '30333:30333/tcp'
      - '30433:30433/tcp'
      - '127.0.0.1:9944:9944/tcp'
    restart: unless-stopped
    command:
      [
        'run',
        '--chain',
        '${NETWORK_ID}',
        '--base-path',
        '/var/subspace',
        '--state-pruning',
        'archive',
        '--blocks-pruning',
        'archive',
        '--listen-on',
        '/ip4/0.0.0.0/tcp/30333',
        '--dsn-listen-on',
        '/ip4/0.0.0.0/tcp/30433',
        '--rpc-cors',
        'all',
        '--rpc-methods',
        'unsafe',
        '--rpc-listen-on',
        '0.0.0.0:9944',
        '--rpc-max-subscriptions-per-connection',
        '1000',
        '--rpc-max-connections',
        '20000',
        '--sync',
        'full',
      ]
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'curl -H ''Content-Type: application/json'' -d ''{"id":1, "jsonrpc":"2.0", "method": "system_health", "params":[]}'' http://localhost:9944/',
        ]
      interval: 30s
      timeout: 10s
      retries: 5

  # Postgres Database for Staking
  postgres-staking:
    image: postgres:17.3-alpine
    volumes:
      - postgres_staking_db:/var/lib/postgresql/data
      - ./db/docker-entrypoint-initdb.d/staking-only/00-staking-setup.sql:/docker-entrypoint-initdb.d/00-staking-setup.sql
      - ./db/docker-entrypoint-initdb.d/staking-only/01-schema-staking.sql:/docker-entrypoint-initdb.d/01-schema-staking.sql
      - ./db/postgresql.conf:/etc/postgresql/postgresql.conf
    restart: unless-stopped
    hostname: postgres-staking
    shm_size: 4g
    environment:
      POSTGRES_DB: ${STAKING_DB_DATABASE:-staking}
      POSTGRES_USER: ${STAKING_DB_USER:-postgres}
      POSTGRES_PASSWORD: ${STAKING_DB_PASSWORD:-postgres}
      POSTGRES_MAX_CONNECTIONS: 200
      POSTGRES_HOST_AUTH_METHOD: md5
      POSTGRES_INITDB_ARGS: --auth=md5
    ports:
      - '${STAKING_DB_EXTERNAL_PORT:-5432}:${STAKING_DB_INTERNAL_PORT:-5432}'
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${STAKING_DB_USER:-postgres}']
      interval: 5s
      timeout: 5s
      retries: 5
    command: ['postgres', '-c', 'config_file=/etc/postgresql/postgresql.conf']

  # PGCat Proxy for Staking
  pgcat-staking:
    image: ghcr.io/postgresml/pgcat:4a7a6a8e7a78354b889002a4db118a8e2f2d6d79
    command:
      - 'pgcat'
      - '/etc/pgcat/pgcat.toml'
    volumes:
      - './db/pgcat-staking.toml:/etc/pgcat/pgcat.toml'
    ports:
      - '6433:6432'
    healthcheck:
      test: ['CMD', 'pgcat', '--version']
      interval: 10s
      timeout: 5s
      retries: 3
    depends_on:
      postgres-staking:
        condition: service_healthy
    restart: unless-stopped

  # Redis
  redis:
    image: redis:latest
    restart: unless-stopped
    ports:
      - '${REDIS_PORT:-6379}:6379'
    volumes:
      - redis_db:/data
    hostname: redis
    command: ['redis-server', '--bind', '0.0.0.0', '--port', '6379']
    healthcheck:
      test: ['CMD-SHELL', 'redis-cli -h localhost -p 6379 ping | grep PONG || exit 1']
      interval: 5s
      timeout: 5s
      retries: 10

  # SubQuery Node (handles substrate project indexing)
  subquery-node:
    image: ghcr.io/autonomys/subql-node-substrate:latest
    ports:
      - '127.0.0.1:3003:3000' # Status page
    depends_on:
      pgcat-staking:
        condition: service_healthy
      postgres-staking:
        condition: service_healthy
      redis:
        condition: service_healthy
    command:
      - -f=/staking
      - --db-schema=staking
      - --workers=1
      - --unsafe
      - --batch-size=125
      - --scale-batch-size
      - --unfinalized-blocks=true
      - --disable-historical=false
      - --finalized-depth=10
      - --comprehensive-fork-detection=true
    environment:
      ENDPOINT: ${RPC_URLS}
      CHAIN_ID: ${CHAIN_ID}
      DB_USER: ${STAKING_DB_USER}
      DB_PASS: ${STAKING_DB_PASSWORD}
      DB_DATABASE: ${STAKING_DB_DATABASE}
      DB_HOST: ${STAKING_DB_HOST}
      DB_PORT: ${STAKING_DB_INTERNAL_PORT}
      REDIS_HOST: ${REDIS_SERVICE_HOST:-redis}
      REDIS_PORT: ${REDIS_SERVICE_PORT:-6379}
    volumes:
      - ../../services/staking-indexer:/staking
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3000/health']
      interval: 30s
      timeout: 10s
      retries: 5

  # Staking Worker (processes background tasks and data aggregation)
  staking-worker:
    build:
      context: ../..
      dockerfile: services/staking-worker/Dockerfile
    depends_on:
      pgcat-staking:
        condition: service_healthy
      postgres-staking:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    environment:
      AUTONOMYS_NODE_URL: ${RPC_URLS}
      DB_HOST: ${STAKING_DB_HOST:-postgres-staking}
      DB_PORT: ${STAKING_INTERNAL_PORT:-5432} # Internal port, not external
      DB_USER: ${STAKING_DB_USER:-postgres}
      DB_PASSWORD: ${STAKING_DB_PASSWORD:-postgres}
      DB_NAME: ${STAKING_DB_DATABASE:-staking}
      REDIS_URL: 'redis://${REDIS_SERVICE_HOST:-redis}:${REDIS_SERVICE_PORT:-6379}'
      BATCH_SIZE: '${BATCH_SIZE:-1000}'
      QUEUE_PROCESSING_INTERVAL_MS: '${QUEUE_PROCESSING_INTERVAL_MS:-500}'
      # Performance configuration
      MAX_CONCURRENT_BATCHES: '${MAX_CONCURRENT_BATCHES:-8}'
      DB_POOL_SIZE: '${DB_POOL_SIZE:-25}'
      DB_CONNECTION_TIMEOUT_MS: '${DB_CONNECTION_TIMEOUT_MS:-3000}'
      # Retry configuration
      MAX_RETRIES: '${MAX_RETRIES:-3}'
      RETRY_DELAY_MS: '${RETRY_DELAY_MS:-5000}'
      # Finality and chain monitoring
      FINALITY_THRESHOLD: '${FINALITY_THRESHOLD:-20}'
      CHAIN_TIP_UPDATE_INTERVAL_MS: '${CHAIN_TIP_UPDATE_INTERVAL_MS:-10000}'
      CHAIN_HEAD_POLL_INTERVAL_MS: '${CHAIN_HEAD_POLL_INTERVAL_MS:-6000}'
      # Health Check Configuration
      DB_HEALTH_CHECK_INTERVAL_MS: '${DB_HEALTH_CHECK_INTERVAL_MS:-30000}'
      # Logging
      ENABLE_DEBUG_LOGS: '${ENABLE_DEBUG_LOGS:-false}'
      LOG_LEVEL: '${LOG_LEVEL:-info}'
    healthcheck:
      test: ['CMD', 'node', '-e', 'process.exit(0)']
      interval: 30s
      timeout: 10s
      start_period: 5s
      retries: 3

  # Hasura GraphQL Engine
  hasura:
    image: hasura/graphql-engine:v2.40.0.cli-migrations-v3
    ports:
      - '${HASURA_GRAPHQL_PORT:-8080}:8080'
    depends_on:
      postgres-staking:
        condition: service_healthy
    restart: unless-stopped
    environment:
      # Database connection
      HASURA_GRAPHQL_DATABASE_URL: postgres://${STAKING_DB_USER}:${STAKING_DB_PASSWORD}@postgres-staking:${STAKING_DB_INTERNAL_PORT}/${STAKING_DB_DATABASE}
      # Configuration from environment (with defaults)
      HASURA_GRAPHQL_ENABLE_CONSOLE: '${HASURA_GRAPHQL_ENABLE_CONSOLE:-true}'
      HASURA_GRAPHQL_DEV_MODE: '${HASURA_GRAPHQL_DEV_MODE:-true}'
      HASURA_GRAPHQL_ADMIN_SECRET: '${HASURA_GRAPHQL_ADMIN_SECRET:-devsecret}'
      HASURA_GRAPHQL_ENABLE_INTROSPECTION: '${HASURA_GRAPHQL_ENABLE_INTROSPECTION:-true}'
      # Use anonymous role for unauthenticated requests
      HASURA_GRAPHQL_UNAUTHORIZED_ROLE: 'anonymous'
      # Logging
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
      # Metadata directory
      HASURA_GRAPHQL_METADATA_DIR: '/hasura-metadata'
    volumes:
      - ./hasura/metadata:/hasura-metadata
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8080/healthz']
      interval: 10s
      timeout: 5s
      retries: 5
    labels:
      - traefik.enable=true
      # Base service definition pointing to this container
      - traefik.http.services.hasura-svc.loadbalancer.server.port=8080
      - traefik.http.services.hasura-svc.loadbalancer.server.scheme=http
      # GraphQL route (rate limited)
      - traefik.http.routers.hasura-graphql.rule=Host(`${TRAEFIK_DOMAIN}`) && Path(`/v1/graphql`)
      - traefik.http.routers.hasura-graphql.entrypoints=websecure
      - traefik.http.routers.hasura-graphql.tls.certresolver=cloudflare
      - traefik.http.routers.hasura-graphql.service=hasura-svc
      - traefik.http.routers.hasura-graphql.priority=100
      - traefik.http.routers.hasura-graphql.middlewares=graphql-ratelimit
      # Console route (rate limited)
      - traefik.http.routers.hasura-console.rule=Host(`${TRAEFIK_DOMAIN}`) && PathPrefix(`/console`)
      - traefik.http.routers.hasura-console.entrypoints=websecure
      - traefik.http.routers.hasura-console.tls.certresolver=cloudflare
      - traefik.http.routers.hasura-console.service=hasura-svc
      - traefik.http.routers.hasura-console.priority=100
      - traefik.http.routers.hasura-console.middlewares=console-ratelimit
      # Health route
      - traefik.http.routers.hasura-health.rule=Host(`${TRAEFIK_DOMAIN}`) && Path(`/healthz`)
      - traefik.http.routers.hasura-health.entrypoints=websecure
      - traefik.http.routers.hasura-health.tls.certresolver=cloudflare
      - traefik.http.routers.hasura-health.service=hasura-svc
      - traefik.http.routers.hasura-health.priority=100
      # Catch-all fallback (no rate limit)
      - traefik.http.routers.hasura-catchall.rule=Host(`${TRAEFIK_DOMAIN}`) && PathPrefix(`/`)
      - traefik.http.routers.hasura-catchall.entrypoints=websecure
      - traefik.http.routers.hasura-catchall.tls.certresolver=cloudflare
      - traefik.http.routers.hasura-catchall.service=hasura-svc
      - traefik.http.routers.hasura-catchall.priority=1
      # Rate limits (per CF-Connecting-IP)
      - traefik.http.middlewares.graphql-ratelimit.ratelimit.average=100
      - traefik.http.middlewares.graphql-ratelimit.ratelimit.burst=200
      - traefik.http.middlewares.graphql-ratelimit.ratelimit.period=1m
      - traefik.http.middlewares.graphql-ratelimit.ratelimit.sourcecriterion.requestheadername=CF-Connecting-IP
      - traefik.http.middlewares.console-ratelimit.ratelimit.average=30
      - traefik.http.middlewares.console-ratelimit.ratelimit.burst=60
      - traefik.http.middlewares.console-ratelimit.ratelimit.period=1m
      - traefik.http.middlewares.console-ratelimit.ratelimit.sourcecriterion.requestheadername=CF-Connecting-IP

  # Reverse proxy with TLS + rate limiting (Traefik)
  traefik:
    image: traefik:v3.1
    restart: unless-stopped
    depends_on:
      hasura:
        condition: service_healthy
    ports:
      - '80:80'
      - '443:443'
    environment:
      - CF_DNS_API_TOKEN=${CF_DNS_API_TOKEN}
    command:
      - --api.dashboard=false
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --entrypoints.web.http.redirections.entrypoint.to=websecure
      - --entrypoints.web.http.redirections.entrypoint.scheme=https
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --certificatesresolvers.cloudflare.acme.dnschallenge=true
      - --certificatesresolvers.cloudflare.acme.dnschallenge.provider=cloudflare
      - --certificatesresolvers.cloudflare.acme.email=${TRAEFIK_ACME_EMAIL}
      - --certificatesresolvers.cloudflare.acme.storage=/letsencrypt/acme.json
      - --serversTransport.forwardingTimeouts.responseHeaderTimeout=3600s
      - --serversTransport.forwardingTimeouts.idleConnTimeout=3600s
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik_letsencrypt:/letsencrypt
